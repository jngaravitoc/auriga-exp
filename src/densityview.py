# imports. you will need exptool, from
# https://github.com/michael-petersen/exptool
# this is NOT pip installable, but you can clone the repo and
# python setup.py install
import numpy as np
from exptool.basis import spheresl
from exptool.utils import halo_methods

# specify your cache generated by simpleSL
sph_file = '/Users/mpetersen/CodeHold/sphexpansion/data/SLGridSph.mw.run9mlde'

# specify your spherical model file (input to simpleSL)
mod_file = '/Users/mpetersen/CodeHold/sphexpansion/data/ErkalMW.model'

# pull in the cache data
lmax,nmax,numr,cmap,rmin,rmax,scale,ltable,evtable,eftable = halo_methods.read_cached_table(sph_file)
xi,rarr,p0,d0 = halo_methods.init_table(mod_file,numr,rmin,rmax,cmap,scale)

# specify the coefficient array: you will not have to do this, because you already have the coefficients in the correct format
# from simpleSL.coefsl()
llmax = (lmax+1)*(lmax+1)
expcoef = np.zeros([llmax,nmax])

# make some mock coefficient values
expcoef[0][0] = 6.0
expcoef[1][0] = 0.01

# specify coordinate
r     = 0.01 # 3d radius
costh = 0.0  # = z/r, polar coordinate
phi   = 0.0  # azimuth

# evaluate fields at a specifc point
den0,den1,pot0,pot1,potr,pott,potp = spheresl.all_eval(r, costh, phi, expcoef,xi,p0,d0,cmap,scale,lmax,nmax,evtable,eftable)

# den0 is the monopole contribution to the density
# den1 is the l>0 contribution to the density
# (therefore, the total density is den0+den1)
# pot0 is the monopole contribution to the potential
# pot1 is the l>0 contribution to the potential
# potr is the radial force
# pott is the polar force
# potp is the azimutuhal force

# this code is fairly basic, it is just manipulating tables and keeping track of normalisations (which I am 95% are correct).
# if the density looks obviously wrong, the norms are probably off, which I can fix.
